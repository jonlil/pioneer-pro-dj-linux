use std::net::{TcpStream, Shutdown};
use std::io::{self, Read, Write};
use std::thread;
use std::time::Duration;

struct Library;
impl Library {
    pub fn start_page() -> Vec<u8> {
        vec![0xff, 0x20]
    }

    // This contains artist and playlists views
    // Seems to be structed data so this will be reusable for listing things in the displays.
    pub fn tbd() -> Vec<u8> {
        vec![
            0xc8,0x3d,0xfc,0x04,0x1e,0xc4,0xac,0x87,0xa3,0x35,0xbc,0x4d,0x08,0x00,0x45,0x00,0x03,
            0x7e,0x00,0x00,0x40,0x00,0xff,0x06,0x00,0x00,0xa9,0xfe,0x25,0x74,0xa9,0xfe,0x1e,0xc4,
            0xff,0x20,0x04,0x1e,0xa0,0xa2,0xdd,0xe3,0x00,0x00,0x4c,0xdf,0x50,0x18,0xff,0xff,0x9b,
            0xa5,0x00,0x00,0x11,0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x40,0x01,0x0f,
            0x02,0x14,0x00,0x00,0x00,0x0c,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x11,0x00,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x41,0x01,0x0f,0x0c,0x14,0x00,0x00,
            0x00,0x0c,0x06,0x06,0x06,
            0x02,0x06,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,
            0x00,0x02,0x11,0x00,0x00,0x00,0x12,0x26,0x00,0x00,0x00,0x09,0xff,0xfa,0x00,0x41,0x00,
            0x52,0x00,0x54,0x00,0x49,0x00,0x53,0x00,0x54,0xff,0xfb,0x00,0x00,0x11,0x00,0x00,0x00,
            0x02,0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x11,0x00,0x00,0x00,0x81,0x11,0x00,0x00,0x00,
            0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,
            0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x41,0x01,
            0x0f,0x0c,0x14,0x00,0x00,0x00,0x0c,0x06,0x06,0x06,0x02,0x06,0x02,0x06,0x06,0x06,0x06,
            0x06,0x06,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x03,0x11,0x00,0x00,0x00,0x10,
            0x26,0x00,0x00,0x00,0x08,0xff,0xfa,0x00,0x41,0x00,0x4c,0x00,0x42,0x00,0x55,0x00,0x4d,
            0xff,0xfb,0x00,0x00,0x11,0x00,0x00,0x00,0x02,0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x11,
            0x00,0x00,0x00,0x82,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,
            0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,
            0x11,0x05,0x80,0x00,0x02,0x10,0x41,0x01,0x0f,0x0c,0x14,0x00,0x00,0x00,0x0c,0x06,0x06,
            0x06,0x02,0x06,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x11,0x00,0x00,0x00,0x00,0x11,0x00,
            0x00,0x00,0x04,0x11,0x00,0x00,0x00,0x10,0x26,0x00,0x00,0x00,0x08,0xff,0xfa,0x00,0x54,
            0x00,0x52,0x00,0x41,0x00,0x43,0x00,0x4b,0xff,0xfb,0x00,0x00,0x11,0x00,0x00,0x00,0x02,
            0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x11,0x00,0x00,0x00,0x83,0x11,0x00,0x00,0x00,0x00,
            0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,
            0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x41,0x01,0x0f,
            0x0c,0x14,0x00,0x00,0x00,0x0c,0x06,0x06,0x06,0x02,0x06,0x02,0x06,0x06,0x06,0x06,0x06,
            0x06,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x0c,0x11,0x00,0x00,0x00,0x0c,0x26,
            0x00,0x00,0x00,0x06,0xff,0xfa,0x00,0x4b,0x00,0x45,0x00,0x59,0xff,0xfb,0x00,0x00,0x11,
            0x00,0x00,0x00,0x02,0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x11,0x00,0x00,0x00,0x8b,0x11,
            0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,
            0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,
            0x10,0x41,0x01,0x0f,0x0c,0x14,0x00,0x00,0x00,0x0c,0x06,0x06,0x06,0x02,0x06,0x02,0x06,
            0x06,0x06,0x06,0x06,0x06,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x05,0x11,0x00,
            0x00,0x00,0x16,0x26,0x00,0x00,0x00,0x0b,0xff,0xfa,0x00,0x50,0x00,0x4c,0x00,0x41,0x00,
            0x59,0x00,0x4c,0x00,0x49,0x00,0x53,0x00,0x54,0xff,0xfb,0x00,0x00,0x11,0x00,0x00,0x00,
            0x02,0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x11,0x00,0x00,0x00,0x84,0x11,0x00,0x00,0x00,
            0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,
            0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x41,0x01,
            0x0f,0x0c,0x14,0x00,0x00,0x00,0x0c,0x06,0x06,0x06,0x02,0x06,0x02,0x06,0x06,0x06,0x06,
            0x06,0x06,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x16,0x11,0x00,0x00,0x00,0x14,
            0x26,0x00,0x00,0x00,0x0a,0xff,0xfa,0x00,0x48,0x00,0x49,0x00,0x53,0x00,0x54,0x00,0x4f,
            0x00,0x52,0x00,0x59,0xff,0xfb,0x00,0x00,0x11,0x00,0x00,0x00,0x02,0x26,0x00,0x00,0x00,
            0x01,0x00,0x00,0x11,0x00,0x00,0x00,0x95,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,
            0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x41,0x01,0x0f,0x0c,0x14,0x00,0x00,
            0x00,0x0c,0x06,0x06,0x06,0x02,0x06,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x11,0x00,0x00,
            0x00,0x00,0x11,0x00,0x00,0x00,0x12,0x11,0x00,0x00,0x00,0x12,0x26,0x00,0x00,0x00,0x09,
            0xff,0xfa,0x00,0x53,0x00,0x45,0x00,0x41,0x00,0x52,0x00,0x43,0x00,0x48,0xff,0xfb,0x00,
            0x00,0x11,0x00,0x00,0x00,0x02,0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x11,0x00,0x00,0x00,
            0x91,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,
            0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x11,

            0x87,0x23,0x49,0xae,0x11,0x05,0x80,0x00,0x02,0x10,0x42,0x01,0x0f,0x00,0x14,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        ]
    }
}

pub fn send_library_port(mut stream: TcpStream) {
    match stream.write(Library::start_page().as_ref()) {
        Ok(what) => eprintln!("Successfully sent message: {:?}", what),
        Err(err) => eprintln!("{:?}", err),
    };
}

pub enum Event {
    RemoteDBServer,
    Unsupported,
}

pub fn get_package_type(buffer: &[u8]) -> Event {
    match buffer {
         //0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00
         &[0, 0, 0, 15, 82, 101, 109, 111, 116, 101, 68, 66, 83, 101, 114, 118, 101, 114, 0] => Event::RemoteDBServer,
         _ => {
             eprintln!("Got unsupported TCP Package:\n{:?} with len: {:?}", buffer, buffer.len());
             Event::Unsupported
         }
    }
}

pub fn handle_client(mut stream: TcpStream) {
    let mut buf = [0u8; 64];
    match stream.read(&mut buf) {
        Ok(size) => {
            match get_package_type(&buf[..size]) {
                Event::RemoteDBServer => send_library_port(stream),
                Event::Unsupported => {},
            }
        },
        Err(err) => eprintln!("{:?}", err),
    }
}
